import { js as beautify } from "js-beautify";
import processJScript from "./processJScript";

interface packages {
  [propName: string]: string;
}

export interface functions {
  [funName: string]: {
    api: boolean;
    discovered?: boolean;
  };
}

export interface decompFunction {
  name: string;
  args: string[];
  raw: string;
  async: boolean;
}

function generatePackageJson(packages: packages) {
  return {
    name: "generator-js",
    version: "1.0.0",
    description: "",
    main: "index.js",
    scripts: {
      test: 'echo "Error: no test specified" && exit 1',
    },
    author: "",
    license: "ISC",
    dependencies: packages,
  };
}

function functionToRoute(func: decompFunction) {
  const full = func.raw + "\n";
  if (func.args.length > 0) {
    return (
      full +
      `app.post('/${func.name}', (req, res) => {
    const body = req.body;
    const response = ${func.name}(${func.args
        .map((a) => `body.${a}`)
        .join(", ")});
    if(isPromise(response)){
        response.then(r => res.send(JSON.stringify(r)));
    }else{
        res.send(JSON.stringify(response));
    }
});`
    );
  } else {
    return (
      full +
      `app.get('/${func.name}', (req, res) => {
    const response = ${func.name}();

    if(isPromise(response)){
        response.then(r => res.send(JSON.stringify(r)));
    }else{
        res.send(JSON.stringify(response));
    }
});`
    );
  }
}

export default function generateExpress(
  raw: string,
  functions: functions,
  packages: packages
) {
  const unpacked = processJScript(raw, functions);
  const takesArgs = !unpacked.functions.every((f) => f.args.length === 0);
  if (takesArgs) {
    // Need to add the library for parsing out the body
    packages["body-parser"] = "latest";
  }
  const packagedotJSON = JSON.stringify(
    generatePackageJson({ ...packages, express: "^4", "is-promise": "4" }),
    null,
    2
  );
  // Generate the main body of the Express server
  let response = `
/*This is an automatic API generated by Automatique (https://automatique.dev)
Generated ${new Date()}*/
// Setup for Express Server
const express = require('express');
const app = express();\n`;
  if (takesArgs) {
    // Build parser
    response += `const bodyParser = require('body-parser');
app.use(bodyParser.json());\n`;
  }
  // Add initializer code provided by the user
  response += unpacked.initializer;
  // Map the functions into HTTP endpoints
  response += unpacked.functions.map((f) => functionToRoute(f)).join("\n\n");
  // Add app listener
  response +=
    "app.listen(3000, () => console.log('example app listening at http://localhost:3000'))";
  return { index: beautify(response), package: packagedotJSON };
}
